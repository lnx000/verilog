/*32位串并转换两段式FSM实现*/
moudle Ser_Par_Conv_32(
												Data_Out,
												write,
												Data_in,
												En,
												clk,
												rst
											);
output [31:0] Data_Out;
output				write;
input 				Data_in;
input					En,clk,rst;

parameter 		S_idle = 0;
parameter 		S_1 = 1;

reg 					state,next_state;
reg 	[4:0] 	cnt;
reg 					Data_Out;
reg 					shift,incr;


always@(posedge clk or posedge rst)
begin
	if(rst)begin state <= S_idle;cnt <= 0;end 
	else state <= next_state;
end 

always@(state or En or write)
begin
	shift = 0;
	incr = 0;
	next_state = state;
	case(state)
		S_idle:			if(En)begin next_state = S_1;shift = 1;end
		S_1:				if(write)begin shift = 1;incr = 1;end
								else if(En)begin shift = 1;incr = 1;end
								else begin next_state = S_idle;incr = 1;end 
	endcase
end

always@(posedge clk or posedge rst)
begin
	if(rst)begin cnt <= 0;end 
	else if(incr) cnt <= cnt + 1;
end 

always@(posedge clk or posedge rst)
begin
	if(rst)Data_Out <= 0;
	else if(shift) Data_Out <= {Data_in,Data_Out[31:1]};
end 

assign write = (cnt==31);

endmodule