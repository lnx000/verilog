//采用状态机的方式其实任然是顺序执行很明显不够快
module multi_Cx(clk,x,y,result)
	input clk;
	input [7:0]x,y;
	output [15:0]result;
	
	reg [15:0] result;
	
	parameter s0 = 0,s1 = 1,s2 = 2;
	reg [2:0] count = 0;
	reg [1:0] state = 0;
	reg [15:0]P,T;
	reg [7:0] y_reg;
	
	always@(posedge clk)
		begin
			case(state);
				s0:begin
					count <= 0;
					P <= 0;
					y_reg <= y;
					T <= {8{1'b0},x};
					state <= s1;
				end
				s1:begin
					if(count == 3'b111) state <= s2;//结束
					else begin
						if(y_reg[0] == 1'b1) P <= P + T;
						else P <= P;
						y_reg <= y_reg >> 1;
						T <= T << 1;
						count <= count + 1;
						state <= s1;
					end
				end
				s2:begin
					result <= P;
					state <= s0;
				end
				default:;
			endcase
		end						
endmodule


//采用流水线的方式并行效率高

module mutli_4bits_pipeline(mul_a,mul_b,clk,rst_n,mul_out)
	input [3:0]mul_a,mul_b;
	input	clk;
	input rst_n;
	
	output mul_out;
	
	reg [7:0] mul_out;
	
	reg [7:0] store0;
	reg [7:0] store1;
	reg [7:0] store2;
	reg [7:0] store3;
	
	reg [7:0] add01;
	reg [7:0] add23;
	
	always@(posedge clk or negedge rst_n)
		begin
			if(!rst_n)
				begin
					mul_out	<= 0;
					store0 <= 0;
					store1 <= 0;
					store2 <= 0;
					store3 <= 0;
					add01 <= 0;
					add23 <= 0;
				end
			else begin
				store0 <= mul_b[0]?{4'b0,mul_a} : 8'b0;
				store1 <= mul_b[1]?{3'b0,mul_a,1'b1} : 8'b0;
				store2 <= mul_b[2]?{2'b0,mul_a,2'b2} : 8'b0;
				
				add01 <= store1 + store0;
				add23 <= store3 + store2;
				
				mul_out <= add01 + add23;
			end
		end
					
endmodule